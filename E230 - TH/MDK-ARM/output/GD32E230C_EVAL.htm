<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\output\GD32E230C_EVAL.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\output\GD32E230C_EVAL.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Thu Jul 15 18:55:18 2021
<BR><P>
<H3>Maximum Stack Usage =        400 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; ReadTH &rArr; Read_Sht3_TH &rArr; SHT3x_ReadData &rArr; TH_IIC_Read_Byte &rArr; TH_IIC_NAck &rArr; SDA_OUT &rArr; gpio_output_options_set
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">ADC_CMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">ADC_CMP_IRQHandler</a><BR>
 <LI><a href="#[45]">Flash_Write_MultiBytes</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">Flash_Write_MultiBytes</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC_CMP_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[e]">DMA_Channel0_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[f]">DMA_Channel1_2_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[10]">DMA_Channel3_4_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[9]">FMC_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from gd32e230_it.o(.text.HardFault_Handler) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[20]">I2C0_ER_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[1a]">I2C0_EV_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[21]">I2C1_ER_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[1b]">I2C1_EV_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[7]">LVD_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from gd32e230_it.o(.text.NMI_Handler) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from gd32e230_it.o(.text.PendSV_Handler) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[a]">RCU_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[1c]">SPI0_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[1d]">SPI1_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from gd32e230_it.o(.text.SVC_Handler) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from gd32e230_it.o(.text.SysTick_Handler) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[23]">SystemInit</a> from system_gd32e230.o(.text.SystemInit) referenced from startup_gd32e230.o(.text)
 <LI><a href="#[12]">TIMER0_BRK_UP_TRG_COM_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[13]">TIMER0_Channel_IRQHandler</a> from timer.o(.text.TIMER0_Channel_IRQHandler) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[16]">TIMER13_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[17]">TIMER14_IRQHandler</a> from timer.o(.text.TIMER14_IRQHandler) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[18]">TIMER15_IRQHandler</a> from timer.o(.text.TIMER15_IRQHandler) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[19]">TIMER16_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[14]">TIMER2_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[15]">TIMER5_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[1e]">USART0_IRQHandler</a> from gd32e230c_eval.o(.text.USART0_IRQHandler) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[1f]">USART1_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[6]">WWDGT_IRQHandler</a> from startup_gd32e230.o(.text) referenced from startup_gd32e230.o(RESET)
 <LI><a href="#[24]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_gd32e230.o(.text)
 <LI><a href="#[25]">fputc</a> from main.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[22]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[24]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(.text)
</UL>
<P><STRONG><a name="[b9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[26]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[3e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[ba]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[bb]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[bc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[bd]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[be]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADC_CMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_CMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA_Channel1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA_Channel3_4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C0_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C0_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>LVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIMER0_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIMER13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIMER5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDGT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_gd32e230.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[bf]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_Filter
</UL>

<P><STRONG><a name="[c1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTH
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_Filter
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2f]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTH
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTH
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_Filter
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_fcmple</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_Filter
</UL>

<P><STRONG><a name="[31]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTH
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_Filter
</UL>

<P><STRONG><a name="[6c]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTH
</UL>

<P><STRONG><a name="[c2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[b8]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[32]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[c3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[2c]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3a]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[3b]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[b5]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[27]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[c4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[34]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[c5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[33]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[c6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[c7]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[37]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[40]"></a>DRV_IWDG_Init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.DRV_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = DRV_IWDG_Init &rArr; rcu_osci_stab_wait &rArr; rcu_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_on
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_enable
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[87]"></a>Delay_1Us</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, th_iic.o(.text.Delay_1Us))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_1Us
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Init
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Wait_Ack
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Read_Byte
</UL>

<P><STRONG><a name="[84]"></a>Delay_2Us</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, th_iic.o(.text.Delay_2Us))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_2Us
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Send_Byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Read_Byte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_NAck
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Ack
</UL>

<P><STRONG><a name="[8a]"></a>Delay_4Us</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, th_iic.o(.text.Delay_4Us))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_4Us
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Stop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Start
</UL>

<P><STRONG><a name="[5a]"></a>Delay_Ms</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, common.o(.text.Delay_Ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendMsg_NoLimit
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendMsg
</UL>

<P><STRONG><a name="[a7]"></a>Flash_Read_OneByte</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, flash.o(.text.Flash_Read_OneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Flash_Read_OneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_multi
</UL>

<P><STRONG><a name="[45]"></a>Flash_Write_MultiBytes</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, flash.o(.text.Flash_Write_MultiBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + In Cycle
<LI>Call Chain = Flash_Write_MultiBytes &rArr;  Flash_Write_MultiBytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_unlock
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_lock
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_flag_clear
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_multi
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_MultiBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun41
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun10
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_MultiBytes
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPara
</UL>

<P><STRONG><a name="[6e]"></a>Get_Channal_Pin</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, th_iic.o(.text.Get_Channal_Pin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_Channal_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sht3_Periodi
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sht3_TH
</UL>

<P><STRONG><a name="[6d]"></a>Get_Duration</STRONG> (Thumb, 872 bytes, Stack size 16 bytes, sht3x.o(.text.Get_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Get_Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTH
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gd32e230_it.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>MBASC_AutoUpLoadFrame</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, modbus_asc.o(.text.MBASC_AutoUpLoadFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MBASC_AutoUpLoadFrame &rArr; MBASC_SendMsg_NoLimit &rArr; MODBUS_ASCII_SendData &rArr; UARTx_SendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendMsg_NoLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e]"></a>MBASC_Fun03</STRONG> (Thumb, 520 bytes, Stack size 56 bytes, modbus_asc.o(.text.MBASC_Fun03))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MBASC_Fun03 &rArr; MBASC_SendErr &rArr; MBASC_SendMsg &rArr; MODBUS_ASCII_SendData1 &rArr; MODBUS_ASCII_RtuPacketToAsciiPacket &rArr; MODBUS_ASCII_HexToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendMsg_NoLimit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendErr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_GetSlaveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Function
</UL>

<P><STRONG><a name="[51]"></a>MBASC_Fun04</STRONG> (Thumb, 632 bytes, Stack size 56 bytes, modbus_asc.o(.text.MBASC_Fun04))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MBASC_Fun04 &rArr; MBASC_SendErr &rArr; MBASC_SendMsg &rArr; MODBUS_ASCII_SendData1 &rArr; MODBUS_ASCII_RtuPacketToAsciiPacket &rArr; MODBUS_ASCII_HexToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendMsg_NoLimit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendErr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_GetSlaveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Function
</UL>

<P><STRONG><a name="[52]"></a>MBASC_Fun10</STRONG> (Thumb, 908 bytes, Stack size 64 bytes, modbus_asc.o(.text.MBASC_Fun10))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = MBASC_Fun10 &rArr; MBASC_SendErr &rArr; MBASC_SendMsg &rArr; MODBUS_ASCII_SendData1 &rArr; MODBUS_ASCII_RtuPacketToAsciiPacket &rArr; MODBUS_ASCII_HexToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendMsg_NoLimit
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendErr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_GetSlaveAddr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_MultiBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Function
</UL>

<P><STRONG><a name="[53]"></a>MBASC_Fun2B</STRONG> (Thumb, 632 bytes, Stack size 56 bytes, modbus_asc.o(.text.MBASC_Fun2B))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = MBASC_Fun2B &rArr; MBASC_SendErr &rArr; MBASC_SendMsg &rArr; MODBUS_ASCII_SendData1 &rArr; MODBUS_ASCII_RtuPacketToAsciiPacket &rArr; MODBUS_ASCII_HexToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendMsg
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendErr
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_GetSlaveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Function
</UL>

<P><STRONG><a name="[55]"></a>MBASC_Fun41</STRONG> (Thumb, 288 bytes, Stack size 56 bytes, modbus_asc.o(.text.MBASC_Fun41))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MBASC_Fun41 &rArr; Flash_Write_MultiBytes &rArr;  Flash_Write_MultiBytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendMsg
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_GetSlaveAddr
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_MultiBytes
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_MultiBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Function
</UL>

<P><STRONG><a name="[58]"></a>MBASC_Function</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, modbus_asc.o(.text.MBASC_Function))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = MBASC_Function &rArr; MBASC_Fun10 &rArr; MBASC_SendErr &rArr; MBASC_SendMsg &rArr; MODBUS_ASCII_SendData1 &rArr; MODBUS_ASCII_RtuPacketToAsciiPacket &rArr; MODBUS_ASCII_HexToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_RecvData
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendMsg
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun41
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun2B
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun10
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun04
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun03
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f]"></a>MBASC_GetSlaveAddr</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, modbus_asc.o(.text.MBASC_GetSlaveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MBASC_GetSlaveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun41
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun2B
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun10
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun04
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun03
</UL>

<P><STRONG><a name="[50]"></a>MBASC_SendErr</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, modbus_asc.o(.text.MBASC_SendErr))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MBASC_SendErr &rArr; MBASC_SendMsg &rArr; MODBUS_ASCII_SendData1 &rArr; MODBUS_ASCII_RtuPacketToAsciiPacket &rArr; MODBUS_ASCII_HexToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendMsg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun2B
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun10
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun04
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun03
</UL>

<P><STRONG><a name="[54]"></a>MBASC_SendMsg</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, modbus_asc.o(.text.MBASC_SendMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = MBASC_SendMsg &rArr; MODBUS_ASCII_SendData1 &rArr; MODBUS_ASCII_RtuPacketToAsciiPacket &rArr; MODBUS_ASCII_HexToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_SendData1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendErr
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun41
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun2B
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Function
</UL>

<P><STRONG><a name="[4d]"></a>MBASC_SendMsg_NoLimit</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, modbus_asc.o(.text.MBASC_SendMsg_NoLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MBASC_SendMsg_NoLimit &rArr; MODBUS_ASCII_SendData &rArr; UARTx_SendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_SendData
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Ms
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun10
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun04
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun03
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_AutoUpLoadFrame
</UL>

<P><STRONG><a name="[5d]"></a>MODBUS_ASCII_AsciiPacketToRtuPacket</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, modbus_ascii.o(.text.MODBUS_ASCII_AsciiPacketToRtuPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MODBUS_ASCII_AsciiPacketToRtuPacket &rArr; MODBUS_ASCII_AsciiToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_AsciiToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_RecvData
</UL>

<P><STRONG><a name="[5e]"></a>MODBUS_ASCII_AsciiToHex</STRONG> (Thumb, 166 bytes, Stack size 8 bytes, modbus_ascii.o(.text.MODBUS_ASCII_AsciiToHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MODBUS_ASCII_AsciiToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_GetLrc
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_AsciiPacketToRtuPacket
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_RecvData
</UL>

<P><STRONG><a name="[60]"></a>MODBUS_ASCII_CheckAscii</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, modbus_ascii.o(.text.MODBUS_ASCII_CheckAscii))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MODBUS_ASCII_CheckAscii
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_RecvData
</UL>

<P><STRONG><a name="[5f]"></a>MODBUS_ASCII_GetLrc</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, modbus_ascii.o(.text.MODBUS_ASCII_GetLrc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MODBUS_ASCII_GetLrc &rArr; MODBUS_ASCII_AsciiToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_AsciiToHex
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_SendData1
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_SendData
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_RecvData
</UL>

<P><STRONG><a name="[9c]"></a>MODBUS_ASCII_HandlRevData</STRONG> (Thumb, 256 bytes, Stack size 8 bytes, modbus_ascii.o(.text.MODBUS_ASCII_HandlRevData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MODBUS_ASCII_HandlRevData
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[62]"></a>MODBUS_ASCII_HexToAscii</STRONG> (Thumb, 90 bytes, Stack size 12 bytes, modbus_ascii.o(.text.MODBUS_ASCII_HexToAscii))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MODBUS_ASCII_HexToAscii
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_RtuPacketToAsciiPacket
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_SendData1
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_SendData
</UL>

<P><STRONG><a name="[59]"></a>MODBUS_ASCII_RecvData</STRONG> (Thumb, 220 bytes, Stack size 48 bytes, modbus_ascii.o(.text.MODBUS_ASCII_RecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MODBUS_ASCII_RecvData &rArr; MODBUS_ASCII_AsciiPacketToRtuPacket &rArr; MODBUS_ASCII_AsciiToHex
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_GetLrc
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_CheckAscii
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_AsciiToHex
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_AsciiPacketToRtuPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Function
</UL>

<P><STRONG><a name="[61]"></a>MODBUS_ASCII_RtuPacketToAsciiPacket</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, modbus_ascii.o(.text.MODBUS_ASCII_RtuPacketToAsciiPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = MODBUS_ASCII_RtuPacketToAsciiPacket &rArr; MODBUS_ASCII_HexToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_HexToAscii
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_SendData1
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_SendData
</UL>

<P><STRONG><a name="[5c]"></a>MODBUS_ASCII_SendData</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, modbus_ascii.o(.text.MODBUS_ASCII_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MODBUS_ASCII_SendData &rArr; UARTx_SendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_SendData
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_RtuPacketToAsciiPacket
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_HexToAscii
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_GetLrc
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendMsg_NoLimit
</UL>

<P><STRONG><a name="[5b]"></a>MODBUS_ASCII_SendData1</STRONG> (Thumb, 264 bytes, Stack size 48 bytes, modbus_ascii.o(.text.MODBUS_ASCII_SendData1))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = MODBUS_ASCII_SendData1 &rArr; MODBUS_ASCII_RtuPacketToAsciiPacket &rArr; MODBUS_ASCII_HexToAscii
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_RtuPacketToAsciiPacket
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_HexToAscii
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_GetLrc
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_counter_reload
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_SendMsg
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e230_it.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e230_it.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>ReadPara</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, para.o(.text.ReadPara))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = ReadPara &rArr; Flash_Write_MultiBytes &rArr;  Flash_Write_MultiBytes (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_MultiBytes
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_MultiBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[68]"></a>ReadTH</STRONG> (Thumb, 420 bytes, Stack size 104 bytes, sht3x.o(.text.ReadTH))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = ReadTH &rArr; Read_Sht3_TH &rArr; SHT3x_ReadData &rArr; TH_IIC_Read_Byte &rArr; TH_IIC_NAck &rArr; SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_Filter
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sht3_TH
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>Read_Sht3_TH</STRONG> (Thumb, 68 bytes, Stack size 64 bytes, sht3x.o(.text.Read_Sht3_TH))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Read_Sht3_TH &rArr; SHT3x_ReadData &rArr; TH_IIC_Read_Byte &rArr; TH_IIC_NAck &rArr; SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_ReadData
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Channal_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTH
</UL>

<P><STRONG><a name="[70]"></a>SDA_IN</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, th_iic.o(.text.SDA_IN))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDA_IN &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Wait_Ack
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Read_Byte
</UL>

<P><STRONG><a name="[74]"></a>SDA_OUT</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, th_iic.o(.text.SDA_OUT))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Stop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Send_Byte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_NAck
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Ack
</UL>

<P><STRONG><a name="[75]"></a>SHT3_Init</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, sht3x.o(.text.SHT3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = SHT3_Init &rArr; Set_Sht3_Periodi &rArr; SHT3x_WriteData &rArr; TH_IIC_Wait_Ack &rArr; TH_IIC_Stop &rArr; SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sht3_Periodi
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>SHT3x_ReadData</STRONG> (Thumb, 210 bytes, Stack size 72 bytes, sht3x.o(.text.SHT3x_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SHT3x_ReadData &rArr; TH_IIC_Read_Byte &rArr; TH_IIC_NAck &rArr; SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Wait_Ack
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Stop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Send_Byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Sht3_TH
</UL>

<P><STRONG><a name="[7c]"></a>SHT3x_WriteData</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, sht3x.o(.text.SHT3x_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SHT3x_WriteData &rArr; TH_IIC_Wait_Ack &rArr; TH_IIC_Stop &rArr; SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Wait_Ack
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Stop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Sht3_Periodi
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, gd32e230_it.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>Set_Sht3_Periodi</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, sht3x.o(.text.Set_Sht3_Periodi))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Set_Sht3_Periodi &rArr; SHT3x_WriteData &rArr; TH_IIC_Wait_Ack &rArr; TH_IIC_Stop &rArr; SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_WriteData
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Channal_Pin
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3_Init
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, gd32e230_it.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_decrement
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SystemInit</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, system_gd32e230.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SystemInit &rArr; system_clock_config &rArr; system_clock_72m_irc8m
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(.text)
</UL>
<P><STRONG><a name="[6b]"></a>TH_Filter</STRONG> (Thumb, 496 bytes, Stack size 104 bytes, sht3x.o(.text.TH_Filter))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = TH_Filter &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTH
</UL>

<P><STRONG><a name="[82]"></a>TH_IIC_Ack</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, th_iic.o(.text.TH_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TH_IIC_Ack &rArr; SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_2Us
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Read_Byte
</UL>

<P><STRONG><a name="[85]"></a>TH_IIC_Init</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, th_iic.o(.text.TH_IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TH_IIC_Init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1Us
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[88]"></a>TH_IIC_NAck</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, th_iic.o(.text.TH_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TH_IIC_NAck &rArr; SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_2Us
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Read_Byte
</UL>

<P><STRONG><a name="[7a]"></a>TH_IIC_Read_Byte</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, th_iic.o(.text.TH_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TH_IIC_Read_Byte &rArr; TH_IIC_NAck &rArr; SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_NAck
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Ack
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_2Us
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1Us
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_ReadData
</UL>

<P><STRONG><a name="[78]"></a>TH_IIC_Send_Byte</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, th_iic.o(.text.TH_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = TH_IIC_Send_Byte &rArr; SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_write
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_2Us
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_WriteData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_ReadData
</UL>

<P><STRONG><a name="[77]"></a>TH_IIC_Start</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, th_iic.o(.text.TH_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TH_IIC_Start &rArr; SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_4Us
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_WriteData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_ReadData
</UL>

<P><STRONG><a name="[7b]"></a>TH_IIC_Stop</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, th_iic.o(.text.TH_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = TH_IIC_Stop &rArr; SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_4Us
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_WriteData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_ReadData
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Wait_Ack
</UL>

<P><STRONG><a name="[79]"></a>TH_IIC_Wait_Ack</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, th_iic.o(.text.TH_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TH_IIC_Wait_Ack &rArr; TH_IIC_Stop &rArr; SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_input_bit_get
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Stop
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_1Us
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_WriteData
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3x_ReadData
</UL>

<P><STRONG><a name="[13]"></a>TIMER0_Channel_IRQHandler</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, timer.o(.text.TIMER0_Channel_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER0_Channel_IRQHandler &rArr; timer_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_disable
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIMER14_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, timer.o(.text.TIMER14_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER14_IRQHandler &rArr; timer_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER15_IRQHandler</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timer.o(.text.TIMER15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TIMER15_IRQHandler &rArr; timer_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_clear
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_flag_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>TIMER15_Init</STRONG> (Thumb, 92 bytes, Stack size 48 bytes, timer.o(.text.TIMER15_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TIMER15_Init &rArr; timer_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_disable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>TIMER2_Init</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, timer.o(.text.TIMER2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = TIMER2_Init &rArr; timer_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_auto_reload_shadow_enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[63]"></a>UARTx_SendData</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, gd32e230c_eval.o(.text.UARTx_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UARTx_SendData &rArr; usart_interrupt_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_set
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_SendData
</UL>

<P><STRONG><a name="[1e]"></a>USART0_IRQHandler</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, gd32e230c_eval.o(.text.USART0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USART0_IRQHandler &rArr; usart_interrupt_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_HandlRevData
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_get
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_flag_clear
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_disable
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_receive
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_gd32e230.o(RESET)
</UL>
<P><STRONG><a name="[9e]"></a>com_gpio_init</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, main.o(.text.com_gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = com_gpio_init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a0]"></a>com_usart_init</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, main.o(.text.com_usart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = com_usart_init &rArr; usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_transmit_config
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_receive_config
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_enable
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_Init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_read_MultiBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7d]"></a>delay_decrement</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, systick.o(.text.delay_decrement))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[56]"></a>flash_read_MultiBytes</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, flash.o(.text.flash_read_MultiBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = flash_read_MultiBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun41
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPara
</UL>

<P><STRONG><a name="[46]"></a>flash_read_multi</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, flash.o(.text.flash_read_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = flash_read_multi &rArr; Flash_Read_OneByte
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Read_OneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_MultiBytes
</UL>

<P><STRONG><a name="[48]"></a>fmc_flag_clear</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gd32e230_fmc.o(.text.fmc_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_MultiBytes
</UL>

<P><STRONG><a name="[4b]"></a>fmc_lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e230_fmc.o(.text.fmc_lock))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_MultiBytes
</UL>

<P><STRONG><a name="[49]"></a>fmc_page_erase</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, gd32e230_fmc.o(.text.fmc_page_erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fmc_page_erase &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_MultiBytes
</UL>

<P><STRONG><a name="[a8]"></a>fmc_ready_wait</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, gd32e230_fmc.o(.text.fmc_ready_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_word_program
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_page_erase
</UL>

<P><STRONG><a name="[a9]"></a>fmc_state_get</STRONG> (Thumb, 84 bytes, Stack size 4 bytes, gd32e230_fmc.o(.text.fmc_state_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = fmc_state_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>

<P><STRONG><a name="[47]"></a>fmc_unlock</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, gd32e230_fmc.o(.text.fmc_unlock))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_MultiBytes
</UL>

<P><STRONG><a name="[4a]"></a>fmc_word_program</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, gd32e230_fmc.o(.text.fmc_word_program))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = fmc_word_program &rArr; fmc_ready_wait &rArr; fmc_state_get
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fmc_ready_wait
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_MultiBytes
</UL>

<P><STRONG><a name="[25]"></a>fputc</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, main.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = fputc &rArr; usart_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_flag_get
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_data_transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[43]"></a>fwdgt_config</STRONG> (Thumb, 232 bytes, Stack size 36 bytes, gd32e230_fwdgt.o(.text.fwdgt_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fwdgt_config
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IWDG_Init
</UL>

<P><STRONG><a name="[66]"></a>fwdgt_counter_reload</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gd32e230_fwdgt.o(.text.fwdgt_counter_reload))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_SendData1
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[44]"></a>fwdgt_enable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, gd32e230_fwdgt.o(.text.fwdgt_enable))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IWDG_Init
</UL>

<P><STRONG><a name="[9f]"></a>gpio_af_set</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, gd32e230_gpio.o(.text.gpio_af_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_af_set
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gpio_init
</UL>

<P><STRONG><a name="[83]"></a>gpio_bit_reset</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32e230_gpio.o(.text.gpio_bit_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_Init
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Wait_Ack
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Stop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Send_Byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Read_Byte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_NAck
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Ack
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[64]"></a>gpio_bit_set</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, gd32e230_gpio.o(.text.gpio_bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_SendData
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_SendData1
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Wait_Ack
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Stop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Start
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Send_Byte
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Read_Byte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_NAck
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Ack
</UL>

<P><STRONG><a name="[86]"></a>gpio_bit_write</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, gd32e230_gpio.o(.text.gpio_bit_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_bit_write
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Send_Byte
</UL>

<P><STRONG><a name="[89]"></a>gpio_input_bit_get</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, gd32e230_gpio.o(.text.gpio_input_bit_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = gpio_input_bit_get
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Wait_Ack
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Read_Byte
</UL>

<P><STRONG><a name="[72]"></a>gpio_mode_set</STRONG> (Thumb, 144 bytes, Stack size 28 bytes, gd32e230_gpio.o(.text.gpio_mode_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = gpio_mode_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gpio_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>

<P><STRONG><a name="[73]"></a>gpio_output_options_set</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, gd32e230_gpio.o(.text.gpio_output_options_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = gpio_output_options_set
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_Init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gpio_init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>

<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = main &rArr; ReadTH &rArr; Read_Sht3_TH &rArr; SHT3x_ReadData &rArr; TH_IIC_Read_Byte &rArr; TH_IIC_NAck &rArr; SDA_OUT &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_interrupt_enable
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_enable
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_interrupt_disable
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_enable
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_disable
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_vector_table_set
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fwdgt_counter_reload
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gpio_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SHT3_Init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadTH
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadPara
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Function
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_AutoUpLoadFrame
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IWDG_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[92]"></a>nvic_irq_enable</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, gd32e230_misc.o(.text.nvic_irq_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nvic_irq_enable &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_Init
</UL>

<P><STRONG><a name="[7f]"></a>nvic_vector_table_set</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, gd32e230_misc.o(.text.nvic_vector_table_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nvic_vector_table_set
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b1]"></a>rcu_clock_freq_get</STRONG> (Thumb, 644 bytes, Stack size 108 bytes, gd32e230_rcu.o(.text.rcu_clock_freq_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_baudrate_set
</UL>

<P><STRONG><a name="[ad]"></a>rcu_flag_get</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gd32e230_rcu.o(.text.rcu_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_osci_stab_wait
</UL>

<P><STRONG><a name="[41]"></a>rcu_osci_on</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gd32e230_rcu.o(.text.rcu_osci_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcu_osci_on
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IWDG_Init
</UL>

<P><STRONG><a name="[42]"></a>rcu_osci_stab_wait</STRONG> (Thumb, 600 bytes, Stack size 56 bytes, gd32e230_rcu.o(.text.rcu_osci_stab_wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = rcu_osci_stab_wait &rArr; rcu_flag_get
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DRV_IWDG_Init
</UL>

<P><STRONG><a name="[71]"></a>rcu_periph_clock_enable</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gd32e230_rcu.o(.text.rcu_periph_clock_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcu_periph_clock_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs485_Init
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_gpio_init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_IIC_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_OUT
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA_IN
</UL>

<P><STRONG><a name="[b0]"></a>rcu_periph_reset_disable</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, gd32e230_rcu.o(.text.rcu_periph_reset_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[af]"></a>rcu_periph_reset_enable</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, gd32e230_rcu.o(.text.rcu_periph_reset_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = rcu_periph_reset_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_deinit
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usart_deinit
</UL>

<P><STRONG><a name="[a3]"></a>rs485_Init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, main.o(.text.rs485_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rs485_Init &rArr; gpio_output_options_set
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_clock_enable
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_output_options_set
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode_set
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_bit_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[93]"></a>timer_auto_reload_shadow_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e230_timer.o(.text.timer_auto_reload_shadow_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_auto_reload_shadow_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_Init
</UL>

<P><STRONG><a name="[90]"></a>timer_deinit</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, gd32e230_timer.o(.text.timer_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = timer_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_Init
</UL>

<P><STRONG><a name="[94]"></a>timer_disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e230_timer.o(.text.timer_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_Init
</UL>

<P><STRONG><a name="[96]"></a>timer_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e230_timer.o(.text.timer_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = timer_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
</UL>

<P><STRONG><a name="[91]"></a>timer_init</STRONG> (Thumb, 252 bytes, Stack size 8 bytes, gd32e230_timer.o(.text.timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_init
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_Init
</UL>

<P><STRONG><a name="[8e]"></a>timer_interrupt_disable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e230_timer.o(.text.timer_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Channel_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_Init
</UL>

<P><STRONG><a name="[8d]"></a>timer_interrupt_enable</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e230_timer.o(.text.timer_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Channel_IRQHandler
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER2_Init
</UL>

<P><STRONG><a name="[8c]"></a>timer_interrupt_flag_clear</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, gd32e230_timer.o(.text.timer_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER14_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Channel_IRQHandler
</UL>

<P><STRONG><a name="[8b]"></a>timer_interrupt_flag_get</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gd32e230_timer.o(.text.timer_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER15_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER14_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER0_Channel_IRQHandler
</UL>

<P><STRONG><a name="[a2]"></a>usart_baudrate_set</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, gd32e230_usart.o(.text.usart_baudrate_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = usart_baudrate_set &rArr; rcu_clock_freq_get
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_clock_freq_get
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[9b]"></a>usart_data_receive</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, gd32e230_usart.o(.text.usart_data_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_data_receive
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>usart_data_transmit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, gd32e230_usart.o(.text.usart_data_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_data_transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_SendData
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>usart_deinit</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gd32e230_usart.o(.text.usart_deinit))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = usart_deinit &rArr; rcu_periph_reset_enable
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_enable
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcu_periph_reset_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[a6]"></a>usart_enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, gd32e230_usart.o(.text.usart_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = usart_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[aa]"></a>usart_flag_get</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, gd32e230_usart.o(.text.usart_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = usart_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[9d]"></a>usart_interrupt_disable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gd32e230_usart.o(.text.usart_interrupt_disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_disable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>usart_interrupt_enable</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, gd32e230_usart.o(.text.usart_interrupt_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = usart_interrupt_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UARTx_SendData
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>usart_interrupt_flag_clear</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, gd32e230_usart.o(.text.usart_interrupt_flag_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_interrupt_flag_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>usart_interrupt_flag_get</STRONG> (Thumb, 102 bytes, Stack size 28 bytes, gd32e230_usart.o(.text.usart_interrupt_flag_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = usart_interrupt_flag_get
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_IRQHandler
</UL>

<P><STRONG><a name="[a4]"></a>usart_receive_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e230_usart.o(.text.usart_receive_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_receive_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[a5]"></a>usart_transmit_config</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, gd32e230_usart.o(.text.usart_transmit_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = usart_transmit_config
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_usart_init
</UL>

<P><STRONG><a name="[b2]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[c8]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[c9]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[ca]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[65]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MODBUS_ASCII_SendData1
</UL>

<P><STRONG><a name="[3f]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[cb]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[cc]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[cd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[57]"></a>__NVIC_SystemReset</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, modbus_asc.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MBASC_Fun41
</UL>

<P><STRONG><a name="[ae]"></a>system_clock_72m_irc8m</STRONG> (Thumb, 228 bytes, Stack size 12 bytes, system_gd32e230.o(.text.system_clock_72m_irc8m))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = system_clock_72m_irc8m
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_config
</UL>

<P><STRONG><a name="[7e]"></a>system_clock_config</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_gd32e230.o(.text.system_clock_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = system_clock_config &rArr; system_clock_72m_irc8m
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_clock_72m_irc8m
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[ac]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, gd32e230_misc.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[ab]"></a>__NVIC_SetPriority</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, gd32e230_misc.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nvic_irq_enable
</UL>

<P><STRONG><a name="[b4]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b3]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[b7]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[b6]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
